
(define (width-of-interval x)
	(if (= (- (upper-bound x) (lower-bound x)) 0)
		(display "width of interval is 0")
		(/ (- (upper-bound x) (lower-bound x)) 2.0)
	))

(define (add-interval x y)
	(make-interval (+ (lower-bound x) (lower-bound y))
				   (+ (upper-bound x) (upper-bound y))))
(define (sub-interval x y)
	(make-interval (- (lower-bound y) (upper-bound x))
				   (- (upper-bound y) (lower-bound x)))
)

define (mul-interval x y)
  (define (cmp-interval x value)
    (cond ((< value (lower-bound x)) -1)
          ((< (upper-bound x) value) 1)
          (else 0)))
  (let ((x_cmp_0 (cmp-interval x 0))
        (y_cmp_0 (cmp-interval y 0)))
    (cond ((and (< x_cmp_0 0) (< y_cmp_0 0))
           (make-interval (* (lower-bound x) (lower-bound y))
                          (* (upper-bound x) (upper-bound y))))
          ((and (< x_cmp_0 0) (= y_cmp_0 0))
           (make-interval (* (upper-bound x) (lower-bound y))
                          (* (upper-bound x) (upper-bound y))))
          ((and (< x_cmp_0 0) (> y_cmp_0 0))
           (make-interval (* (upper-bound x) (lower-bound y))
                          (* (lower-bound x) (upper-bound y))))
          ((and (= x_cmp_0 0) (< y_cmp_0 0))
           (make-interval (* (lower-bound x) (upper-bound y))
                          (* (upper-bound x) (upper-bound y))))
          ((and (= x_cmp_0 0) (> y_cmp_0 0))
           (make-interval (* (upper-bound x) (lower-bound y))
                          (* (lower-bound x) (lower-bound y))))
          ((and (> x_cmp_0 0) (< y_cmp_0 0))
           (make-interval (* (lower-bound x) (upper-bound y))
                          (* (upper-bound x) (lower-bound y))))
          ((and (> x_cmp_0 0) (= y_cmp_0 0))
           (make-interval (* (lower-bound x) (upper-bound y))
                          (* (lower-bound x) (lower-bound y))))
          ((and (> x_cmp_0 0) (> y_cmp_0 0))
           (make-interval (* (upper-bound x) (upper-bound y))
                          (* (lower-bound x) (lower-bound y))))
          (else
           (make-interval (min (* (upper-bound x) (lower-bound y))
                               (* (lower-bound x) (upper-bound y)))
                          (max (* (lower-bound x) (lower-bound y))
                               (* (upper-bound x) (upper-bound y))))))))(define (div-interval x y)
	(mul-interval
	 x
	 (make-interval (/ 1.0 (upper-bound y))
	 				(/ 1.0 (lower-bound y)))))

(define (make-interval a b) (cons a b))
(define (upper-bound x) (cdr x))
(define (lower-bound x) (car x))
(define (print x) 
		(display "(")
		(display (cdr x))
		(display ", ")
		(display (car x))
		(display ")")
		(newline))

(define s-p (make-interval 3 3))
(define e-p (make-interval 7 13))


(width-of-interval s-p)
